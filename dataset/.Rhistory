library(reticulate)
install.packages(c("cachem", "evaluate", "httpuv", "httr", "httr2", "later", "profvis", "rlang", "sass", "testthat", "tzdb", "viridisLite", "vroom", "waldo", "xml2"))
library(reticulate)
library(reticulate)
use_python("/Users/Patricio/anaconda3/bin/python3")
use_python("C:\Users\Patricio\anaconda3/python3")
use_python("/Users/Patricio/anaconda3/python3")
use_python("\Users\Patricio\anaconda3")
use_python("\Users\Patricio\anaconda3\python3")
use_python("\users\Patricio\anaconda3\python3")
knitr::opts_chunk$set(echo = TRUE)
c(1,2,3)
scan()
vec<- c(16,0,1,20,1,7,88,5,1,9)
fix(vec)
vec
par(mfrow = c(1,2))
plot = plot(exp(1:20), xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lineal")
plotlog = plot( exp(1:20), log = "y" , xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lodaritmica en el eje y")
plot(alumnos,notas, pch=16, col= "mediumvioletred", xlab= "Alumnos", ylab= "Notas",
main = "Notas alumnos 2023")
alumnos = c(1:10)
notas = c(2,5,7,9,8,3,5,6,10,7)
plot(alumnos,notas, pch=16, col= "mediumvioletred", xlab= "Alumnos", ylab= "Notas",
main = "Notas alumnos 2023")
par(mfrow = c(1,2))
plot = plot(exp(1:20), xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lineal")
plotlog = plot( exp(1:20), log = "y" , xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lodaritmica en el eje y")
par(mfrow = c(1,2))
alumnos = c(1:10)
notas = c(2,5,7,9,8,3,5,6,10,7)
plot(alumnos,notas, pch=16, col= "mediumvioletred", xlab= "Alumnos", ylab= "Notas",
main = "Notas alumnos 2023")
par(mfrow = c(1,1))
alumnos = c(1:10)
notas = c(2,5,7,9,8,3,5,6,10,7)
plot(alumnos,notas, pch=16, col= "mediumvioletred", xlab= "Alumnos", ylab= "Notas",
main = "Notas alumnos 2023")
plot(alumnos,notas, pch=16, col= "mediumvioletred", xlab= "Alumnos", ylab= "Notas",
main = "Notas alumnos 2023", type = "b")
par(mfrow = c(1,2))
plot = plot(exp(1:20), xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lineal")
plotlog = plot( exp(1:20), log = "y" , xlab = "Indice", ylab = expression(e^{1:20}),
main = "Escala lodaritmica en el eje y")
par(mfrow = c(3,2))
plot(x,y pch =  23, cex = 2, col = "blue", type = "p")
x = c(50:59)
y = c(2, 9, 25, 3, 100, 77, 62, 54, 19, 40)
plot(x,y pch =  23, cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23,  cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23,  cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23, cex = 2, col = "blueviolet", type = "l")
plot(x,y, pch = 23, cex = 2, col = "gold", type = "b")
plot(x,y, pch = 23, cex = 2, col = "deeppink", type = "o")
plot(x,y, pch = 23, cex = 2, col = "springgreen", type = "h")
plot(x,y, pch = 23, cex = 2, col = "firebrick1", type = "s")
par(mfrow = c(1,1))
par(mfrow = c(3,2))
x = c(50:59)
y = c(2, 9, 25, 3, 100, 77, 62, 54, 19, 40)
plot(x,y, pch = 23,  cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23, cex = 2, col = "blueviolet", type = "l")
plot(x,y, pch = 23, cex = 2, col = "gold", type = "b")
plot(x,y, pch = 23, cex = 2, col = "deeppink", type = "o")
plot(x,y, pch = 23, cex = 2, col = "springgreen", type = "h")
plot(x,y, pch = 23, cex = 2, col = "firebrick1", type = "s")
par(mfrow = c(1,1))
title("Tipos de Graficas y sus tipos de lineas")
plot(x,y, pch = 23,  cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23, cex = 2, col = "blueviolet", type = "l")
plot(x,y, pch = 23, cex = 2, col = "gold", type = "b")
plot(x,y, pch = 23, cex = 2, col = "deeppink", type = "o")
plot(x,y, pch = 23, cex = 2, col = "springgreen", type = "h")
plot(x,y, pch = 23, cex = 2, col = "firebrick1", type = "s")
par(mfrow = c(1,1))
par(mfrow = c(3,2))
x = c(50:59)
y = c(2, 9, 25, 3, 100, 77, 62, 54, 19, 40)
title("Tipos de Graficas y sus tipos de lineas")
plot(x,y, pch = 23,  cex = 2, col = "blue", type = "p")
plot(x,y, pch = 23, cex = 2, col = "blueviolet", type = "l")
plot(x,y, pch = 23, cex = 2, col = "gold", type = "b")
plot(x,y, pch = 23, cex = 2, col = "deeppink", type = "o")
plot(x,y, pch = 23, cex = 2, col = "springgreen", type = "h")
plot(x,y, pch = 23, cex = 2, col = "firebrick1", type = "s")
par(mfrow = c(1,1))
datos <- c( 10,1,3,7,7,5)
rating<- sort(datos, decreasing = FALSE, unique(datos))
rating<- sort(datos, decreasing = FALSE, unique(datos, incomparables = FALSE))
datos2<-unique(datos)
datos2
sort(datos2, decreasing = FALSE)
sort(datos2, decreasing = FALSE)
length(datos2$1)
length(datos2 == 10)
count(datos2 == 10)
library(tidyverse)
count(datos2 == 10)
count(datos2)
class(datos2)
sum(datos==7)
datos_sin_1<- datos, !1
datos_sin_1<- c(datos, !=1)
datos_sin_1<- c(datos, 1 = FALSE)
datossin_1<- datos[which(! = 1)]
datossin_1<- datos[which(datos, !=1)
datos[which(datos != "1")]
library(dplyr)
library(tidyverse)
library(ggplot2)
library(skimr)
library(visdat)
library(inspectdf)
library(patchwork)
## Cargar base de datos
dataset<- read.csv("Adidas_Nike_dataset.csv")
setwd("C:/Users/Patricio/Mi unidad/Programacion/Portafolio/R/Adidas vs NIke EDA/dataset")
dataset<- read.csv("Adidas_Nike_dataset.csv")
### Procesar
head(dataset, n = 10)
# elliminamos "descripccion", "Product.ID" y "Last.Visited" , ya que molesta y no se utilizar치n
dataset <- dataset %>% select(- Description)
dataset <- dataset %>% select(- Product.ID)
dataset <- dataset %>% select(- Last.Visited)
# revisamos la estructura de los datos
glimpse(dataset)
# Ajuste de las variables
# Last visited como fecha
dataset$Last.Visited <- as.Date(dataset$Last.Visited)
dataset<- read.csv("Adidas_Nike_dataset.csv")
### Procesar
head(dataset, n = 10)
# elliminamos "descripccion", "Product.ID" y "Last.Visited" , ya que molesta y no se utilizar치n
dataset <- dataset %>% select(- Description)
dataset <- dataset %>% select(- Product.ID)
dataset <- dataset %>% select(- Last.Visited)
# revisamos la estructura de los datos
glimpse(dataset)
# Ajuste de las variables
# Brand hay q cambiarlo a factor
dataset$Brand <- as.factor(dataset$Brand)
# Rating hay q pasarlo a numerico
dataset$Rating <- as.numeric(dataset$Rating)
# Reviews hay q pasarlo a numerico
dataset$Reviews <- as.numeric(dataset$Reviews)
# cambiar los nombres en la variable brand
levels(dataset$Brand) # vemos los nombres a  reemplazar
# Nuevos Nombres
mynewnames <- c("Adidas Adidas ORIGINALS" = "Adidas", "Adidas CORE / NEO" = "Adidas",
"Adidas ORIGINALS" = "Adidas", "Adidas SPORT PERFORMANCE" = "Adidas",
"Nike" = "Nike")
# reemplazamos
levels(dataset$Brand) <- mynewnames[levels(dataset$Brand)]
# Identificar y tratar NA
any(is.na(dataset))
inspect_na(dataset) %>% show_plot() # no NA
# Identificar y tratar duplicados
any(duplicated(dataset))
sum(duplicated(dataset))
dataset <- dataset %>% distinct()
## "Analisis descriptivo de los datos"
# volvemos a visualizar
head(dataset, n=10)
# primera vision de los datos
skim(dataset)
# tenemos que son 3268 observaciones y 7 variables
# 2 variables de tipo "caracter" y 5 "numericas
# No hay variables agrupadas
# no hay datos perdidos (NA)
# posiblementte hayan outliers
names(dataset)
# resumen visual de los datos
general <- vis_dat(dataset)
tipos_de_datos <- inspect_types(dataset) %>% show_plot()  # Explorar tipos de datos
inspeccion_categoricos <- inspect_cat(dataset) %>% show_plot() # Explorar datos categoricos
inspeccion_numericos <- inspect_num(dataset) %>% show_plot() # explorar los numericos
plot_resumen <- tipos_de_datos + general
# la mayoria de las variables del dataframe son datos de tipo integer o numericos  y
# solo una variable son categoricas  y 1 es de tipo cadena de caracteres.
inspeccion_categoricos  # el mayor procentaje de los datos obtenidos son de la marca adidas
inspeccion_numericos    # las variables tienen una distribucion unimodal pero se nota la presencia
# de outliers en las variables.
### Analizar
install.packages("psych")
plot_resumen <- tipos_de_datos + general
plot_resumen
library(psych)
View(dataset)
corPlot(dataset[, 2:6],
min.length = 3)
corPlot(dataset[, "Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews"],
min.length = 3)
corPlot(dataset[, c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")],
min.length = 3)
corPlot(dataset[, c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")])
corPlot(dataset[, c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")],
labels = c("L.Price", "S.Price", "Discount", "Rat", "Rev"))
library(GGally)
### Preparar
install.packages("GGally")
library(GGally)
?ggpairs
ggpairs(dataset,                 # Data frame
columns = c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")
aes(color = Species,  # Color por grupo (var. categ칩rica)
ggpairs(dataset,                 # Data frame
columns = c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")        # Columnas
aes(color = Species,  # Color por grupo (var. categ칩rica)
ggpairs(dataset)
ggpairs(dataset,
columns = 2:5)
ggpairs(datasetm,
columns = c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews"))
ggpairs(dataset,
columns = c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews"))
ggpairs(dataset, c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews"))
general <- vis_dat(dataset)
tipos_de_datos <- inspect_types(dataset) %>% show_plot()  # Explorar tipos de datos
inspeccion_categoricos <- inspect_cat(dataset) %>% show_plot() # Explorar datos categoricos
inspeccion_numericos <- inspect_num(dataset) %>% show_plot() # explorar los numericos
plot_resumen <- tipos_de_datos + general
plot_resumen
general <- vis_dat(dataset)
tipos_de_datos <- inspect_types(dataset) %>% show_plot()  # Explorar tipos de datos
inspeccion_categoricos <- inspect_cat(dataset) %>% show_plot() # Explorar datos categoricos
inspeccion_numericos <- inspect_num(dataset) %>% show_plot() # explorar los numericos
plot_resumen <- tipos_de_datos + general
plot_resumen
inspeccion_categoricos  # el mayor procentaje de los datos obtenidos son de la marca adidas
inspeccion_numericos    # l
corPlot(dataset[, "Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews"],
min.length = 3)
corPlot(dataset[, c("Listing.Price", "Sale.Price", "Discount", "Rating", "Reviews")],
min.length = 3)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price)) +
geom_boxplot()
ggplot(data = dataset, aes(x = dataset$Brand, y = dataset$Listing.Price)) +
geom_boxplot()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(skimr)
library(visdat)
library(inspectdf)
library(patchwork)
library(psych)
ggplot(data = dataset, aes(x = dataset$Brand, y = dataset$Listing.Price))
names(dataset)
ggplot(data = dataset, aes(x = Brand , y = Listing.Price))
dev.off()
ggplot(data = dataset, aes(x = Brand , y = Listing.Price))
ggplot(data = dataset, aes(x = Brand , y = Listing.Price)) +
geom_boxplot()
ggplot(data = dataset, aes(x = Brand , y = Listing.Price)) +
geom_boxplot(outlier.shape = NA)
ggplot(data = dataset, aes(x = Brand , y = Listing.Price)) +
geom_violin(outlier.shape = NA)
ggplot(data = dataset, aes(x = Brand , y = Listing.Price)) +
geom_boxplot(outlier.shape = NA)
boxplot.stats(dataset$Listing.Price)$out
dataset %>%
mutate(is_outlier = Listing.Price %in% boxplot.stats(dataset$Listing.Price)$out) %>%
filter(!is_outlier)
boxplot.stats(dataset$Sale.Price)$out
dataset %>%
mutate(is_outlier = Sale.Price %in% boxplot.stats(dataset$Sale.Price)$out) %>%
filter(!is_outlier)
boxplot.stats(dataset$Discount)$out
dataset %>%
mutate(is_outlier = Discount %in% boxplot.stats(dataset$Discount)$out) %>%
filter(!is_outlier)
boxplot.stats(dataset$Rating)$out
dataset %>%
mutate(is_outlier = Rating %in% boxplot.stats(dataset$Rating)$out) %>%
filter(!is_outlier)
boxplot.stats(dataset$Reviews)$out
dataset %>%
mutate(is_outlier = Reviews %in% boxplot.stats(dataset$Reviews)$out) %>%
filter(!is_outlier)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE)+
# Sale price
boxplot.stats(dataset$Sale.Price)$out
boxplot.stats(dataset$Listing.Price)$out
dataset %>%
mutate(is_outlier = Listing.Price %in% boxplot.stats(dataset$Listing.Price)$out) %>%
filter(!is_outlier)
# visualizamos la distribucion de datos
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE)+
geom_boxplot(width = 0.07)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.10)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.01)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.02)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(0, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
min(dataset$Listing.Price)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price, fill = c("#490092", "#005000")))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price, fill = c("#490092")))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price, color = c("#490092", "#005000"))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price, colour = c("#490092", "#005000"))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price, colours(c("#490092", "#005000"))) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
boxplot.stats(dataset$Sale.Price)$out
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000))+
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
scale_color_manual(values=c("#500050" , "#005000") +
theme_classic()
boxplot.stats(dataset$Sale.Price)$out
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
scale_color_manual(values=c("#500050" , "#005000")
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price))+
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
scale_color_manual(values=c("#500050","#005000") +
theme_classic()
xzxc
ggplot(data = dataset, aes(x = Brand, y = Listing.Price)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
scale_color_manual( values = c('#500050','#005000')) +
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
scale_fill_manual( values = c('#500050','#005000')) +
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price , fill = tension)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price , fill = Brand)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
theme_classic()
skim(dataset)
dataset %>%
mutate(is_outlier = Listing.Price %in%
ggplot(data = dataset, aes(x = Brand, y = Listing.Price , fill = Brand))$out) %>%
filter(!is_outlier)
ggplot(data = dataset, aes(x = Brand, y = Listing.Price , fill = Brand)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
theme_classic()
ggplot(data = dataset, aes(x = Brand, y = Listing.Price , fill = Brand)) +
geom_violin(trim = FALSE) +
geom_boxplot(outlier.shape = NA , width = 0.05) +
scale_y_continuous(breaks=c(1000, 5000, 10000, 15000, 20000, 25000, 30000)) +
theme_classic()
